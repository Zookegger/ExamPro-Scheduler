name: Deploy ExamPro Scheduler to Render

# Trigger events following snake_case naming
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  # Simplified build job focused on deployment preparation
  prepare_deployment:
    name: Prepare Application for Deployment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20  # Single version for simplicity
          cache: 'npm'
          cache-dependency-path: |
            server/package-lock.json
            client/package-lock.json
      
      # Essential build steps only
      - name: Install Server Dependencies
        working-directory: ./server
        run: |
          echo "üì¶ Installing server dependencies..."
          npm ci
      
      - name: Install Client Dependencies
        working-directory: ./client
        run: |
          echo "üì¶ Installing client dependencies..."
          npm ci
      
      # Check for linting issues before building
      - name: Check Code Quality
        working-directory: ./client
        run: |
          echo "üîç Checking code quality..."
          # Run ESLint to show warnings (but don't fail)
          npm run lint --if-present || echo "No lint script found"
          echo "Code quality check completed"
      
      # Build with better error handling
      - name: Build React Application
        working-directory: ./client
        run: |
          echo "üèóÔ∏è Building React application..."
          # Temporarily disable treating warnings as errors
          CI=false npm run build
          echo "‚úÖ Build completed successfully!"
      
      - name: Verify Build Output
        run: |
          echo "üìÇ Checking build output..."
          if [ -d "client/build" ]; then
            echo "‚úÖ Build directory created"
            echo "üìä Build size: $(du -sh client/build | cut -f1)"
          else
            echo "‚ùå Build directory not found"
            exit 1
          fi

  # Deploy job that runs after successful preparation
  deploy_to_render:
    name: Deploy to Render Platform
    needs: prepare_deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Trigger Render deployment
      - name: Trigger Render Deployment
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
          RENDER_APP_URL: ${{ secrets.RENDER_APP_URL }}
        run: |
          echo "üöÄ Triggering Render deployment..."
          
          if [ -z "$RENDER_DEPLOY_HOOK" ]; then
            echo "‚ùå RENDER_DEPLOY_HOOK secret not set"
            exit 1
          fi
          
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "branch": "${{ github.ref_name }}", 
              "sha": "${{ github.sha }}",
              "commit_message": "${{ github.event.head_commit.message }}",
              "author": "${{ github.event.head_commit.author.name }}"
            }' \
            "$RENDER_DEPLOY_HOOK")
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
            echo "‚úÖ Deployment triggered successfully!"
            echo "Response: $body"
          else
            echo "‚ùå Deployment failed with status: $http_code"
            echo "Response: $body"
            exit 1
          fi
      
      # Simple deployment notification
      - name: Deployment Success Notification
        if: success()
        run: |
          echo "üéâ ExamPro Scheduler deployment initiated!"
          echo "üìÖ Deployment time: $(date)"
          echo "üîó Check Render dashboard for progress"
